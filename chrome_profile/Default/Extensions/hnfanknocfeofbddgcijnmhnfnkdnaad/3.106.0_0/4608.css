.a1q37wuz{-webkit-transform:scale(calc(2 / 3));-ms-transform:scale(calc(2 / 3));transform:scale(calc(2 / 3));padding-right:var(--spacing-0.5);}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL2xpYnMvd2FsbGV0LWNkcy1leHRlbnNpb24vY29tcG9uZW50cy9Vc2VyQXZhdGFyL0F2YXRhckJveC50c3giXSwibmFtZXMiOlsiLmExcTM3d3V6Il0sIm1hcHBpbmdzIjoiQUFFeUJBIiwiZmlsZSI6Ii93b3Jrc3BhY2VzL2xpYnMvd2FsbGV0LWNkcy1leHRlbnNpb24vY29tcG9uZW50cy9Vc2VyQXZhdGFyL0F2YXRhckJveC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdHlsZWQgfSBmcm9tICdAbGluYXJpYS9yZWFjdCc7XG5cbmV4cG9ydCBjb25zdCBBdmF0YXJCb3ggPSBzdHlsZWQuZGl2YFxuICB0cmFuc2Zvcm06IHNjYWxlKGNhbGMoMiAvIDMpKTtcbiAgcGFkZGluZy1yaWdodDogdmFyKC0tc3BhY2luZy0wXFwuNSk7XG5gO1xuIl19*/
.i1e9v8aj{display:inline-block;}
.r19wr0yy{display:inline-block;-webkit-animation:countDownAnimation-r19wr0yy 11s;animation:countDownAnimation-r19wr0yy 11s;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;}@-webkit-keyframes countDownAnimation-r19wr0yy{0%{color:rgb(var(--gray60));}100%{color:rgb(var(--red60));}}@keyframes countDownAnimation-r19wr0yy{0%{color:rgb(var(--gray60));}100%{color:rgb(var(--red60));}}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL2xpYnMvd2FsbGV0LWNkcy13ZWIvY29tcG9uZW50cy9UeERldGFpbHNMaXN0L1R4RGV0YWlsUm93cy9SZWZyZXNoQ291bnRkb3duLnRzeCJdLCJuYW1lcyI6WyIuaTFlOXY4YWoiLCIucjE5d3IweXkiXSwibWFwcGluZ3MiOiJBQTJFeUJBO0FBSUNDIiwiZmlsZSI6Ii93b3Jrc3BhY2VzL2xpYnMvd2FsbGV0LWNkcy13ZWIvY29tcG9uZW50cy9UeERldGFpbHNMaXN0L1R4RGV0YWlsUm93cy9SZWZyZXNoQ291bnRkb3duLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBkZWZpbmVNZXNzYWdlcywgdXNlSW50bCB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGxpbmFyaWEvY29yZSc7XG5pbXBvcnQgeyB1c2VSZWZyZXNoQ291bnRkb3duIH0gZnJvbSAnY2Itd2FsbGV0LWRhdGEvaG9va3MvdXNlUmVmcmVzaENvdW50ZG93bi91c2VSZWZyZXNoQ291bnRkb3duJztcbmltcG9ydCB7IFRleHRMYWJlbDIgfSBmcm9tICdAY2JocS9jZHMtd2ViL3R5cG9ncmFwaHknO1xuXG5leHBvcnQgY29uc3QgbWVzc2FnZXMgPSBkZWZpbmVNZXNzYWdlcyh7XG4gIG5ld1F1b3RlSW46IHtcbiAgICBkZWZhdWx0TWVzc2FnZTogJ05ldyBxdW90ZSBpbjoge3F1b3RlQ291bnRkb3dufScsXG4gICAgZGVzY3JpcHRpb246XG4gICAgICAnTGFiZWwgZm9yIHJlcHJlc2VudGluZyBob3cgbWFueSBzZWNvbmRzIHdlIGhhdmUgdW50aWwgdGhlIG5leHQgbmV0d29yayBmZWUgcmVmcmVzaCcsXG4gIH0sXG59KTtcblxudHlwZSBQcm9wcyA9IHtcbiAgbGFzdFVwZGF0ZVRpbWU/OiBEYXRlO1xuICBpc1BhZ2VMb2FkaW5nPzogYm9vbGVhbjtcbiAgY291bnRkb3duVGltZT86IG51bWJlcjtcbiAgZGlzYWJsZUNvbG9yQW5pbWF0aW9uPzogYm9vbGVhbjtcbn07XG5cbmNvbnN0IE5VTV9TRUNPTkRTX1RPX1NIT1dfUkVEID0gMTE7XG5cbnR5cGUgVXNlQ291bnREb3duU3R5bGVQYXJhbXMgPSB7XG4gIGlzUGFnZUxvYWRpbmc6IGJvb2xlYW47XG4gIGRpc2FibGVDb2xvckFuaW1hdGlvbjogYm9vbGVhbjtcbiAgc2Vjb25kczogbnVtYmVyO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNvdW50ZG93blN0eWxlKHtcbiAgaXNQYWdlTG9hZGluZyxcbiAgZGlzYWJsZUNvbG9yQW5pbWF0aW9uLFxuICBzZWNvbmRzLFxufTogVXNlQ291bnREb3duU3R5bGVQYXJhbXMpIHtcbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChpc1BhZ2VMb2FkaW5nIHx8IGRpc2FibGVDb2xvckFuaW1hdGlvbikge1xuICAgICAgcmV0dXJuIGlubGluZUJsb2NrU3R5bGU7XG4gICAgfVxuXG4gICAgaWYgKHNlY29uZHMgPD0gTlVNX1NFQ09ORFNfVE9fU0hPV19SRUQpIHtcbiAgICAgIHJldHVybiByZWRDb3VudERvd25TdHlsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5saW5lQmxvY2tTdHlsZTtcbiAgfSwgW2Rpc2FibGVDb2xvckFuaW1hdGlvbiwgaXNQYWdlTG9hZGluZywgc2Vjb25kc10pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVmcmVzaENvdW50ZG93bih7XG4gIGxhc3RVcGRhdGVUaW1lLFxuICBpc1BhZ2VMb2FkaW5nID0gZmFsc2UsXG4gIGNvdW50ZG93blRpbWUsXG4gIGRpc2FibGVDb2xvckFuaW1hdGlvbiA9IGZhbHNlLFxufTogUHJvcHMpIHtcbiAgY29uc3QgeyBmb3JtYXRNZXNzYWdlIH0gPSB1c2VJbnRsKCk7XG4gIGNvbnN0IHsgbm9ybWFsaXplZFNlY29uZHMgfSA9IHVzZVJlZnJlc2hDb3VudGRvd24oe1xuICAgIGxhc3RVcGRhdGVUaW1lLFxuICAgIGlzUGFnZUxvYWRpbmcsXG4gICAgY291bnRkb3duVGltZSxcbiAgfSk7XG5cbiAgY29uc3QgY291bnREb3duU3R5bGUgPSB1c2VDb3VudGRvd25TdHlsZSh7XG4gICAgaXNQYWdlTG9hZGluZyxcbiAgICBkaXNhYmxlQ29sb3JBbmltYXRpb24sXG4gICAgc2Vjb25kczogTnVtYmVyKG5vcm1hbGl6ZWRTZWNvbmRzKSxcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8VGV4dExhYmVsMiBhcz1cInBcIiBjb2xvcj1cImZvcmVncm91bmRNdXRlZFwiIHRlc3RJRD1cInJlZnJlc2gtY291bnRkb3duXCI+XG4gICAgICB7Zm9ybWF0TWVzc2FnZShtZXNzYWdlcy5uZXdRdW90ZUluLCB7XG4gICAgICAgIHF1b3RlQ291bnRkb3duOiA8c3BhbiBjbGFzc05hbWU9e2NvdW50RG93blN0eWxlfT57bm9ybWFsaXplZFNlY29uZHN9PC9zcGFuPixcbiAgICAgIH0pfVxuICAgIDwvVGV4dExhYmVsMj5cbiAgKTtcbn1cblxuY29uc3QgaW5saW5lQmxvY2tTdHlsZSA9IGNzc2BcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuYDtcblxuY29uc3QgcmVkQ291bnREb3duU3R5bGUgPSBjc3NgXG4gIEBrZXlmcmFtZXMgY291bnREb3duQW5pbWF0aW9uIHtcbiAgICAwJSB7XG4gICAgICBjb2xvcjogcmdiKHZhcigtLWdyYXk2MCkpO1xuICAgIH1cbiAgICAxMDAlIHtcbiAgICAgIGNvbG9yOiByZ2IodmFyKC0tcmVkNjApKTtcbiAgICB9XG4gIH1cbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBhbmltYXRpb246IGNvdW50RG93bkFuaW1hdGlvbiAke05VTV9TRUNPTkRTX1RPX1NIT1dfUkVEfXM7XG4gIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xuYDtcbiJdfQ==*/
.o8ndml8{position:relative;}.o8ndml8::before{content:'';width:0;height:0;border:1em solid transparent;position:absolute;left:85%;top:-28px;border-bottom:16px solid #330004;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL2xpYnMvd2FsbGV0LWNkcy1leHRlbnNpb24vY29tcG9uZW50cy9PdXRsaW5lQm94LnRzeCJdLCJuYW1lcyI6WyIubzhuZG1sOCJdLCJtYXBwaW5ncyI6IkFBMEJ1QkEiLCJmaWxlIjoiL3dvcmtzcGFjZXMvbGlicy93YWxsZXQtY2RzLWV4dGVuc2lvbi9jb21wb25lbnRzL091dGxpbmVCb3gudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGxpbmFyaWEvY29yZSc7XG5pbXBvcnQgeyB1c2VTcGVjdHJ1bSB9IGZyb20gJ0BjYmhxL2Nkcy13ZWInO1xuaW1wb3J0IHsgQm94IH0gZnJvbSAnQGNiaHEvY2RzLXdlYi9sYXlvdXQnO1xuXG50eXBlIFByb3BzID0ge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xuICB0ZXN0SUQ/OiBzdHJpbmc7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIE91dGxpbmVCb3goeyBjaGlsZHJlbiB9OiBQcm9wcykge1xuICBjb25zdCBzcGVjdHJ1bSA9IHVzZVNwZWN0cnVtKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8Qm94XG4gICAgICBjbGFzc05hbWU9e091dGxpbmV9XG4gICAgICBib3JkZXJSYWRpdXM9XCJyb3VuZGVkXCJcbiAgICAgIGRhbmdlcm91c2x5U2V0QmFja2dyb3VuZD17c3BlY3RydW0gPT09ICdkYXJrJyA/ICcjMzMwMDA0JyA6ICdGRkY1RjYnfVxuICAgICAgc3BhY2luZ0hvcml6b250YWw9ezF9XG4gICAgICBzcGFjaW5nVmVydGljYWw9ezF9XG4gICAgICB3aWR0aD1cIjEwMCVcIlxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0JveD5cbiAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IE91dGxpbmUgPSBjc3NgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHdpZHRoOiAwO1xuICAgIGhlaWdodDogMDtcbiAgICBib3JkZXI6IDFlbSBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogODUlO1xuICAgIHRvcDogLTI4cHg7XG4gICAgYm9yZGVyLWJvdHRvbTogMTZweCBzb2xpZCAjMzMwMDA0O1xuICB9XG5gO1xuIl19*/
.n1wo4ekf{position:absolute;bottom:0;right:0;width:16px;height:16px;left:20px;top:22px;border-radius:50%;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL2xpYnMvd2FsbGV0LWNkcy1leHRlbnNpb24vY29tcG9uZW50cy9UeERldGFpbHMvRGFwcFR4UmVxdWVzdEhlYWRlci50c3giXSwibmFtZXMiOlsiLm4xd280ZWtmIl0sIm1hcHBpbmdzIjoiQUEwSHFCQSIsImZpbGUiOiIvd29ya3NwYWNlcy9saWJzL3dhbGxldC1jZHMtZXh0ZW5zaW9uL2NvbXBvbmVudHMvVHhEZXRhaWxzL0RhcHBUeFJlcXVlc3RIZWFkZXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWVtbywgdXNlQ2FsbGJhY2ssIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZGVmaW5lTWVzc2FnZXMsIHVzZUludGwgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BsaW5hcmlhL2NvcmUnO1xuaW1wb3J0IHsgZ2V0SG9zdE5hbWVGb3JEYXBwIH0gZnJvbSAnY2Itd2FsbGV0LWFuYWx5dGljcy91dGlscy9nZXRIb3N0TmFtZUZvckRhcHAnO1xuaW1wb3J0IHsgRGFwcEluZm8gfSBmcm9tICdjYi13YWxsZXQtZGF0YS9jaGFpbnMvQWNjb3VudEJhc2VkL3NoYXJlZC90eXBlcy9EYXBwSW5mbyc7XG5pbXBvcnQgeyBJY29uTmFtZSB9IGZyb20gJ0BjYmhxL2Nkcy1jb21tb24nO1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gJ0BjYmhxL2Nkcy13ZWIvaWNvbnMvSWNvbic7XG5pbXBvcnQgeyBCb3gsIEhTdGFjaywgVlN0YWNrIH0gZnJvbSAnQGNiaHEvY2RzLXdlYi9sYXlvdXQnO1xuaW1wb3J0IHsgUmVtb3RlSW1hZ2UgfSBmcm9tICdAY2JocS9jZHMtd2ViL21lZGlhL1JlbW90ZUltYWdlJztcbmltcG9ydCB7IFRvb2x0aXAgfSBmcm9tICdAY2JocS9jZHMtd2ViL292ZXJsYXlzL1Rvb2x0aXAvVG9vbHRpcCc7XG5pbXBvcnQgeyBUZXh0SGVhZGxpbmUsIFRleHRMZWdhbCB9IGZyb20gJ0BjYmhxL2Nkcy13ZWIvdHlwb2dyYXBoeSc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGRhcHBJbmZvOiBEYXBwSW5mbztcbiAgaWNvbj86IEljb25OYW1lO1xuICBoZWFkZXJEYXBwTmFtZT86IHN0cmluZztcbiAgaXNSZXZva2VPcGVyYXRpb24/OiBib29sZWFuO1xufTtcblxuY29uc3QgbWVzc2FnZXMgPSBkZWZpbmVNZXNzYWdlcyh7XG4gIHRpdGxlOiB7XG4gICAgZGVmYXVsdE1lc3NhZ2U6ICdSZXZpZXcnLFxuICAgIGRlc2NyaXB0aW9uOiAncmV2aWV3IHRpdGxlJyxcbiAgfSxcbiAgZGFwcFVybFJlcXVlc3RUZXh0OiB7XG4gICAgZGVmYXVsdE1lc3NhZ2U6ICdSZXF1ZXN0IGZyb20ge2RhcHBVUkx9JyxcbiAgICBkZXNjcmlwdGlvbjogJ0RhcHAgcmVxdWVzdCBob3N0IFVSTCcsXG4gIH0sXG4gIGRhcHBVcmxSZXZva2VUZXh0OiB7XG4gICAgZGVmYXVsdE1lc3NhZ2U6ICdSZXZva2UgYWxsb3dhbmNlIHRvIHtkYXBwVVJMfScsXG4gICAgZGVzY3JpcHRpb246ICdEYXBwIHJlcXVlc3QgaG9zdCBVUkwnLFxuICB9LFxuICBoZWFkZXJUb290bHRpcDoge1xuICAgIGRlZmF1bHRNZXNzYWdlOiAnT25seSBzaWduIGlmIHlvdSBmdWxseSB0cnVzdCB0aGlzIHNpdGUgd2l0aCBhY2Nlc3MgdG8geW91ciBhY2NvdW50JyxcbiAgICBkZXNjcmlwdGlvbjogJ0hlYWRlciB0b29sdGlwIGNvbnRlbnQnLFxuICB9LFxufSk7XG5cbmZ1bmN0aW9uIERhcHBUeEhlYWRlckRldGFpbCh7IGRhcHBJbmZvLCBpY29uLCBoZWFkZXJEYXBwTmFtZSwgaXNSZXZva2VPcGVyYXRpb24gfTogUHJvcHMpIHtcbiAgY29uc3QgeyBmb3JtYXRNZXNzYWdlIH0gPSB1c2VJbnRsKCk7XG5cbiAgY29uc3QgeyBkYXBwTG9nb1VSTCwgZGFwcExvZ29VUkxBbHQsIG5ldHdvcmtCYWRnZVVSTCwgbmV0d29ya0JhZGdlQWx0LCBkYXBwVVJMIH0gPSBkYXBwSW5mbztcbiAgY29uc3QgW3NvdXJjZVVybCwgc2V0U291cmNlVXJsXSA9IHVzZVN0YXRlKGRhcHBMb2dvVVJMKTtcbiAgY29uc3Qgc2V0QWx0ZXJuYXRpdmVEYXBwTG9nb1VSTCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRTb3VyY2VVcmwoZGFwcExvZ29VUkxBbHQpO1xuICB9LCBbZGFwcExvZ29VUkxBbHRdKTtcblxuICBjb25zdCBkYXBwTmFtZTogc3RyaW5nID0gdXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIGhlYWRlckRhcHBOYW1lIHx8IGdldEhvc3ROYW1lRm9yRGFwcChkYXBwVVJMKTtcbiAgfSwgW2RhcHBVUkwsIGhlYWRlckRhcHBOYW1lXSk7XG5cbiAgY29uc3QgaW1hZ2UgPSB1c2VNZW1vKFxuICAgICgpID0+XG4gICAgICBpY29uID8gKFxuICAgICAgICA8SWNvbiBuYW1lPXtpY29ufSBzaXplPVwibVwiIGNvbG9yPVwiZm9yZWdyb3VuZE11dGVkXCIgLz5cbiAgICAgICkgOiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPFJlbW90ZUltYWdlXG4gICAgICAgICAgICBzb3VyY2U9e3NvdXJjZVVybH1cbiAgICAgICAgICAgIHJlc2l6ZU1vZGU9XCJjb250YWluXCJcbiAgICAgICAgICAgIHdpZHRoPXszMn1cbiAgICAgICAgICAgIGhlaWdodD17MzJ9XG4gICAgICAgICAgICBzaGFwZT1cInNxdWlyY2xlXCJcbiAgICAgICAgICAgIGFsdD17ZGFwcExvZ29VUkxBbHR9XG4gICAgICAgICAgICBvbkVycm9yPXtzZXRBbHRlcm5hdGl2ZURhcHBMb2dvVVJMfVxuICAgICAgICAgIC8+XG4gICAgICAgICAge25ldHdvcmtCYWRnZVVSTCA/IChcbiAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPXtuZXR3b3JrQmFkZ2V9IHNyYz17bmV0d29ya0JhZGdlVVJMfSBhbHQ9e25ldHdvcmtCYWRnZUFsdH0gLz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC8+XG4gICAgICApLFxuICAgIFtkYXBwTG9nb1VSTEFsdCwgaWNvbiwgbmV0d29ya0JhZGdlQWx0LCBuZXR3b3JrQmFkZ2VVUkwsIHNldEFsdGVybmF0aXZlRGFwcExvZ29VUkwsIHNvdXJjZVVybF0sXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8Qm94IGFsaWduSXRlbXM9XCJmbGV4LXN0YXJ0XCIgc3BhY2luZ0hvcml6b250YWw9ezN9IHNwYWNpbmdWZXJ0aWNhbD17Mn0+XG4gICAgICA8SFN0YWNrXG4gICAgICAgIHNwYWNpbmdFbmQ9ezJ9XG4gICAgICAgIGhlaWdodD1cIjEwMCVcIlxuICAgICAgICBhbGlnblNlbGY9XCJjZW50ZXJcIlxuICAgICAgICBwb3NpdGlvbj1cInJlbGF0aXZlXCJcbiAgICAgICAgdGVzdElEPVwiZGFwcC10cmFuc2FjdGlvbi1yZXF1ZXN0LWhlYWRlclwiXG4gICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgPlxuICAgICAgICA8Qm94IHBvc2l0aW9uPVwicmVsYXRpdmVcIj57aW1hZ2V9PC9Cb3g+XG4gICAgICA8L0hTdGFjaz5cbiAgICAgIDxIU3RhY2s+XG4gICAgICAgIDxWU3RhY2s+XG4gICAgICAgICAgPFRleHRIZWFkbGluZSBhcz1cImgxXCIgdGFiSW5kZXg9ezB9IHNwYWNpbmdCb3R0b209ezAuNX0+XG4gICAgICAgICAgICB7Zm9ybWF0TWVzc2FnZShtZXNzYWdlcy50aXRsZSl9XG4gICAgICAgICAgPC9UZXh0SGVhZGxpbmU+XG4gICAgICAgICAgPEJveCBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgICAgICA8VGV4dExlZ2FsIGFzPVwic3BhblwiIGNvbG9yPVwiZm9yZWdyb3VuZE11dGVkXCI+XG4gICAgICAgICAgICAgIHtmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgICAgICAgIGlzUmV2b2tlT3BlcmF0aW9uID8gbWVzc2FnZXMuZGFwcFVybFJldm9rZVRleHQgOiBtZXNzYWdlcy5kYXBwVXJsUmVxdWVzdFRleHQsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgZGFwcFVSTDogKFxuICAgICAgICAgICAgICAgICAgICA8VGV4dExlZ2FsXG4gICAgICAgICAgICAgICAgICAgICAgYXM9XCJzcGFuXCJcbiAgICAgICAgICAgICAgICAgICAgICBjb2xvcj1cImZvcmVncm91bmRcIlxuICAgICAgICAgICAgICAgICAgICAgIGtleT1cImRvbWFpbi1uYW1lLXN0eWxlXCJcbiAgICAgICAgICAgICAgICAgICAgICB0ZXN0SUQ9XCJkYXBwLXRyYW5zYWN0aW9uLXJlcXVlc3QtaGVhZGVyLWRhcHAtbmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c9XCJicmVha1wiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICB7ZGFwcE5hbWV9XG4gICAgICAgICAgICAgICAgICAgIDwvVGV4dExlZ2FsPlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9UZXh0TGVnYWw+XG4gICAgICAgICAgICA8VG9vbHRpcCBjb250ZW50PXtmb3JtYXRNZXNzYWdlKG1lc3NhZ2VzLmhlYWRlclRvb3RsdGlwKX0gcGxhY2VtZW50PVwiYm90dG9tXCI+XG4gICAgICAgICAgICAgIDxJY29uIG5hbWU9XCJpbmZvXCIgc2l6ZT1cInhzXCIgY29sb3I9XCJmb3JlZ3JvdW5kTXV0ZWRcIiBzcGFjaW5nU3RhcnQ9ezF9IC8+XG4gICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgIDwvVlN0YWNrPlxuICAgICAgPC9IU3RhY2s+XG4gICAgPC9Cb3g+XG4gICk7XG59XG5cbmV4cG9ydCBjb25zdCBEYXBwVHhSZXF1ZXN0SGVhZGVyID0gbWVtbyhEYXBwVHhIZWFkZXJEZXRhaWwpO1xuXG5jb25zdCBuZXR3b3JrQmFkZ2UgPSBjc3NgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgYm90dG9tOiAwO1xuICByaWdodDogMDtcbiAgd2lkdGg6IDE2cHg7XG4gIGhlaWdodDogMTZweDtcbiAgbGVmdDogMjBweDtcbiAgdG9wOiAyMnB4O1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG5gO1xuIl19*/
.ssem9bc{-webkit-text-decoration:line-through;text-decoration:line-through;}
.d103lgz1{margin:0 8px 0 0;color:var(--foreground-muted);font-size:16px;}
/*# sourceMappingURL=data:application/json;base64,*/
.h10vhxwd::-webkit-scrollbar{display:none;}
/*# sourceMappingURL=data:application/json;base64,*/

/*# sourceMappingURL=4608.css.map*/